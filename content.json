{"pages":[],"posts":[{"title":"Ubuntu基础配置记录","text":"换源阿里云： 1234$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.old # for backup$ sudo sed -i 's/security.ubuntu/mirrors.aliyun/g' /etc/apt/sources.list$ sudo sed -i 's/archive.ubuntu/mirrors.aliyun/g' /etc/apt/sources.list$ sudo apt update 常用apt指令12345678910111213141516sudo apt-get update 更新源sudo apt-get install package 安装包sudo apt-get remove package 删除包sudo apt-cache search package 搜索软件包sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等sudo apt-get install package --reinstall 重新安装包sudo apt-get -f install 修复安装sudo apt-get remove package --purge 删除包，包括配置文件等sudo apt-get build-dep package 安装相关的编译环境sudo apt-get upgrade 更新已安装的包sudo apt-get dist-upgrade 升级系统sudo apt-cache depends package 了解使用该包依赖那些包sudo apt-cache rdepends package 查看该包被哪些包依赖sudo apt-get source package 下载该包的源代码sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包sudo apt-get check 检查是否有损坏的依赖","link":"/2020/07/14/Ubuntu%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"},{"title":"Windows Terminal 配置 Powerline","text":"Powerline 提供自定义的命令提示符体验，提供 Git 状态颜色编码和提示符 本教程配置了PowerShell和WSL在Windows Terminal中的Powerline，除了第一点安装Powerline字体为必需步骤，剩余两点不影响，可选择配置 [TOC] 在windows中安装Powerline字体下载微软开源Cascadia Code，这里下载了CascadiaCode-2007.01.zip，解压安装PL（Powerline）字体，Cascadia Code PL 或 Cascadia Mono PL包含Powerline字体，其他不包含。 在PowerShell中设置Powerline字体 确保Windows中安装有Git 打开Windows Terminal的PowerShell页，安装Posh-Git和Oh-My-Posh 12Install-Module posh-git -Scope CurrentUserInstall-Module oh-my-posh -Scope CurrentUser 出现提示选择[Y]“是” 然后使用指令打开PowerShell 配置文件，该脚本在每次启动 PowerShell 时运行 1notepad $PROFILE 将以下内容追加到文件内 123Import-Module posh-gitImport-Module oh-my-poshSet-Theme Paradox 每个新实例启动时都会导入 Posh-Git 和 Oh-My-Posh，然后从 Oh-My-Posh 设置 Paradox 主题 如果没有使用过配置文件，在打开配置文件时会提示没有该文件，直接新建即可 修改配置文件后，重启PowerShell，若出现在此系统上禁止运行脚本的提示，需要以管理员身份启动PowerShell，执行指令set-executionpolicy remotesigned即可允许运行脚本 打开Windows Terminal的配置文件settings.json，添加fontFace字段，举例如下： 1234567{ \"guid\": \"xxx\", \"name\": \"Windows PowerShell\", \"commandline\": \"powershell.exe\", \"hidden\": false, \"fontFace\": \"Cascadia Mono PL\"}, 添加字段注意不要漏了逗号，安装了Mono字体则添加”Cascadia Mono PL”，Code字体则添加”Cascadia Code PL” 重启PowerShell 在WSL-Ubuntu中安装Zsh和Oh-My-Zsh12sudo apt install zshsudo chsh -s `which zsh` #设置默认shell为zsh 1sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 如果（一般）下不下来，直接Github，选择一个合适的路径clone仓库 1git clone https://github.com/ohmyzsh/ohmyzsh.git --depth=1 进入仓库 123456sudo cp ./templates/zshrc.zsh-template ~/.zshrcsudo vim ~/.zshrc# 修改ZSH路径指向clone下来的仓库，仓库不能删除export ZSH=$HOME/Git_Repos/ohmyzsh# 这是我的路径source ~/.zshrc 重启终端 在WSL-Ubuntu中设置Powerline字体 这里使用Go 安装Go 1sudo apt install golang-go 解决Go资源被墙，打开shell的配置文件，这里打开~/.profile，追加： 12export GO111MODULE=onexport GOPROXY=https://goproxy.io 更新配置： 1source ~/.profile 下载powerline-go 1go get -u github.com/justjanne/powerline-go 自定义主题，这里定义为agnoster，可查看仓库themes下内容，配置时去除后缀 1234sudo vim ~/.zshrc# 修改主题配置ZSH_THEME=\"agnoster\"source ~/.zshrc 若出现安全性报错，进入.zshrc，添加 ZSH_DISABLE_COMPFIX=”true” 字段 自定义Ubuntu提示符 1sudo vim ~/.zshrc 添加如下内容，如果Go的安装更改了默认的路径，应当修改下面的GOPATH为正确的路径 1234567891011121314151617GOPATH=$HOME/gofunction powerline_precmd() { PS1=\"$($GOPATH/bin/powerline-go -error $? -shell zsh)\"}function install_powerline_precmd() { for s in \"${precmd_functions[@]}\"; do if [ \"$s\" = \"powerline_precmd\" ]; then return fi done precmd_functions+=(powerline_precmd)}if [ \"$TERM\" != \"linux\" ]; then install_powerline_precmdfi 1source ~/.zshrc","link":"/2020/07/14/Windows-Terminal-%E9%85%8D%E7%BD%AE-Powerline/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"系统配置","slug":"系统配置","link":"/tags/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"name":"Windows Terminal","slug":"Windows-Terminal","link":"/tags/Windows-Terminal/"},{"name":"配置","slug":"配置","link":"/tags/%E9%85%8D%E7%BD%AE/"},{"name":"美化","slug":"美化","link":"/tags/%E7%BE%8E%E5%8C%96/"},{"name":"Powerline","slug":"Powerline","link":"/tags/Powerline/"}],"categories":[]}